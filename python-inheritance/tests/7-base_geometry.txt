------------------------------------
Doctest for module 7-base_geometry.py
------------------------------------

Import module:
       >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Check instantiation and type:
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


Tests for integer validation:
---------------------------------------------------------
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("age", 1)


>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: <name> must be greater than 0


>>> bg.integer_validator("age", -3)
Traceback (most recent call last):
ValueError: <name> must be greater than 0


>>> bg.integer_validator("age", "3")
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", 3.5)
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", [1])
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", True)
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", {1,3})
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: <name> must be an integer
